module MINIMP-SYNTAX
  imports INT-SYNTAX
  imports BOOL-SYNTAX

  syntax Id2 ::= "x1" | "x2" | "x3" | "x4" | "x5"
  syntax AExp  ::= Int | Id2
                 | "-" Int                    [format(%1%2)]
                 | AExp "/" AExp              [left, seqstrict, color(pink)]
                 | "(" AExp ")"               [bracket]
                 | AExp "*" AExp              [left, seqstrict]
                 | AExp "%" AExp              [left, seqstrict]
                 > AExp "+" AExp              [left, seqstrict, color(pink)]
                 | AExp "-" AExp              [left, seqstrict, color(pink)]
  syntax BExp  ::= Bool
                 | AExp "==" AExp             [seqstrict]
                 | AExp "<=" AExp             [seqstrict]
                 | AExp "<" AExp              [seqstrict]
                 | AExp ">=" AExp             [seqstrict]
                 | AExp ">" AExp              [seqstrict]
                 | "!" BExp                   [strict, color(pink)]
                 | "(" BExp ")"               [bracket]
                 // | "nondet"
                 > BExp "&&" BExp             [left, strict(1), color(pink)]
  syntax Block ::= "{" "}"
                 | "{" Stmt "}"               [format(%1%i%n%2%d%n%3)]
  syntax Stmt  ::= Block
                 | Id2 "=" AExp ";"            [strict(2), color(pink), format(%1 %2 %3%4)]
                 | "if" "(" BExp ")"
                   Block "else" Block         [strict(1), colors(yellow, white, white, yellow), format(%1 %2%3%4 %5 %6 %7)]
                 | "while" "(" BExp ")" Block [colors(yellow,white,white), format(%1 %2%3%4 %5)]
                 > Stmt Stmt                  [left, format(%1%n%2)]
  syntax Pgm ::= Stmt
  syntax Pgm ::= "int" Ids ";" Stmt           [format(%1 %2%3%n%4), colors(yellow,pink)]
  syntax Ids ::= List{Id2,","}                 [format(%1%2 %3)]

endmodule

module MINIMP
  imports MINIMP-SYNTAX
  imports INT
  imports BOOL

  syntax KResult ::= Int | Bool

  configuration <T color="yellow">
                  <k color="green"> $PGM:Pgm </k>
                  <x1 color="red"> 0 </x1>
                  <x2 color="red"> 0 </x2>
                  <x3 color="red"> 0 </x3>
                  <x4 color="red"> 0 </x4>
                  <x5 color="red"> 0 </x5>
                </T>

  rule <k> x1 => I ...</k> <x1> I </x1>
  rule <k> x2 => I ...</k> <x2> I </x2>
  rule <k> x3 => I ...</k> <x3> I </x3>
  rule <k> x4 => I ...</k> <x4> I </x4>
  rule <k> x5 => I ...</k> <x5> I </x5>

  rule I1 / I2 => I1 /Int I2  requires I2 =/=Int 0
  rule I1 * I2 => I1 *Int I2
  rule I1 % I2 => I1 %Int I2
  rule I1 + I2 => I1 +Int I2
  rule I1 - I2 => I1 -Int I2
  rule - I1 => 0 -Int I1

  rule I1 == I2 => I1 ==Int I2
  rule I1 <= I2 => I1 <=Int I2
  rule I1 < I2 => I1 <Int I2
  rule I1 >= I2 => I1 >=Int I2
  rule I1 > I2 => I1 >Int I2
  rule ! T => notBool T
  rule true && B => B
  rule false && _ => false

  rule {} => .   [structural]
  rule {S} => S  [structural]

  rule <k> x1 = I:Int; => . ...</k> <x1> _ => I </x1>
  rule <k> x2 = I:Int; => . ...</k> <x2> _ => I </x2>
  rule <k> x3 = I:Int; => . ...</k> <x3> _ => I </x3>
  rule <k> x4 = I:Int; => . ...</k> <x4> _ => I </x4>
  rule <k> x5 = I:Int; => . ...</k> <x5> _ => I </x5>

  rule S1:Stmt S2:Stmt => S1 ~> S2  [structural]
  rule if (true)  S else _ => S // requires C
  rule if (false) _ else S => S // requires notBool C

  rule while (B) S => if (B) {S while (B) S} else {}  [structural]

  rule int _L; S => S  [structural]

endmodule
